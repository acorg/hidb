#! /usr/bin/env python3
# -*- Python -*-

"""
scatterplot of HI assay titres and neutralisation assay titers
"""

import sys, os, traceback, pprint, csv
if sys.version_info.major != 3: raise RuntimeError("Run script with python3")
from pathlib import Path
sys.path[:0] = [str(Path(os.environ["ACMACSD_ROOT"]).resolve().joinpath("py"))]
import logging; module_logger = logging.getLogger(__name__)

import hidb as hidb_m
from acmacs_base import timeit, json

# ----------------------------------------------------------------------

def main(args):
    data = scan_hidb(args)
    scatter_data = make_scatter(data)
    max_hi, max_neut = find_max(scatter_data)
    print(max_hi, max_neut)
    pprint.pprint(scatter_data)

# ----------------------------------------------------------------------

def scan_hidb(args):
    hidb = hidb_m.HiDb()
    with timeit("Reading hidb"):
        hidb.import_from(str(Path(args.path_to_hidb).expanduser().resolve()))
        # hidb.import_locdb(str(Path("~/AD/data/locationdb.json.xz").expanduser().resolve()))
    antigens = hidb.list_antigens(lab=args.lab.upper(), assay="neut")
    antigens = [antigen for antigen in antigens if antigen.in_hi_assay(hidb)]
    data = {}                   # antigen-name -> serum-name -> {hi: [titer], neut: [titer]}
    # print("Antigens:", len(antigens))
    for antigen in antigens:
        antigen_full_name = antigen.data().full_name()
        # print(antigen_full_name)
        antigen_data = data.setdefault(antigen_full_name, {})
        for table in antigen.tables():
            table_data = hidb.table(table.table_id())
            assay = "hi" if table_data.chart_info().assay() == "HI" else "neut"
            antigen_no = table_data.antigen_index_by_full_name(antigen_full_name)
            for serum_no in range(table_data.number_of_sera()):
                serum_data = antigen_data.setdefault(table_data.serum_full_name(serum_no), {"hi": [], "neut": []})
                serum_data[assay].append(table_data.titer(antigen_no, serum_no))
    return data

# ----------------------------------------------------------------------

def make_scatter(data):
    scatter_data = []           # list of pairs [hi, neut]
    for antigen, antigen_data in data.items():
        for serum, serum_data in antigen_data.items():
            if len(serum_data["hi"]) == 1 and serum_data["hi"][0] != "*" and len(serum_data["neut"]) == 1 and serum_data["neut"][0] != "*":
                scatter_data.append([serum_data["hi"][0], serum_data["neut"][0]])
    return scatter_data

# ----------------------------------------------------------------------

def find_max(scatter_data):
    max_hi = 0
    max_neut = 0
    for hi, neut in scatter_data:
        max_hi = max(max_hi, int(hi[1:]) if hi[0] in ["<", ">"] else int(hi))
        max_neut = max(max_neut, int(neut[1:]) if neut[0] in ["<", ">"] else int(neut))
    return max_hi, max_neut

# def clean(data):
#     """Leave only entries where just one hi titer and one neut titer"""
#     for antigen, antigen_data in data.items():
#         serum_to_remove = [serum for serum, serum_data in antigen_data.items() if len(serum_data["hi"]) != 1 or len(serum_data["neut"]) != 1]
#         for serum in serum_to_remove:
#             del antigen_data[serum]
#     antigen_to_remove = [antigen for antigen, antigen_data in data.items() if not antigen_data]
#     for antigen in antigen_to_remove:
#         del data[antigen]

# ----------------------------------------------------------------------

try:
    import argparse
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument('-d', '--debug', action='store_const', dest='loglevel', const=logging.DEBUG, default=logging.INFO, help='Enable debugging output.')

    parser.add_argument('--db', action='store', dest='path_to_hidb', default="~/AD/data/hidb4.h3.json.xz")
    parser.add_argument('--lab', action='store', dest='lab', default="")

    args = parser.parse_args()
    logging.basicConfig(level=args.loglevel, format="%(levelname)s %(asctime)s: %(message)s")
    exit_code = main(args)
except Exception as err:
    logging.error('{}\n{}'.format(err, traceback.format_exc()))
    exit_code = 1
exit(exit_code)

# ======================================================================
### Local Variables:
### eval: (if (fboundp 'eu-rename-buffer) (eu-rename-buffer))
### End:
