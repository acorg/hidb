#! /usr/bin/env python3
# -*- Python -*-

"""
"""

import sys, os, time, traceback
if sys.version_info.major != 3: raise RuntimeError("Run script with python3")
from pathlib import Path
sys.path[:0] = [str(Path(os.environ["ACMACSD_ROOT"]).resolve().joinpath("py"))]
# sys.path[:0] = [str(Path(sys.argv[0]).resolve().parents[1].joinpath("dist")), str(Path(sys.argv[0]).resolve().parents[1].joinpath("python"))]
import logging; module_logger = logging.getLogger(__name__)

import hidb as hidb_m
from hidb import utility
from acmacs_base import timeit

# ----------------------------------------------------------------------

def main(args):
    hidb = hidb_m.HiDb()
    if Path(args.path_to_hidb).exists():
        with timeit("Reading hidb"):
            hidb.import_from(args.path_to_hidb)
    for source in (Path(f).resolve() for f in args.input):
        if "~" not in source:             # ignore backups
            print(source)
            hidb.add(hidb_m.import_chart(utility.get_ace_data(source)))
            # print("------------")
    if Path(args.path_to_hidb).exists():
        backup_dir = Path(args.path_to_hidb).parent.joinpath(".backup")
        backup_dir.mkdir(mode=0o755, exist_ok=True)
        Path(args.path_to_hidb).rename(backup_dir.joinpath(Path(args.path_to_hidb).stem + "." + time.strftime("%Y%m%d-%H%M", time.localtime(Path(args.path_to_hidb).stat().st_mtime)) + ".xz"))
    with timeit("Writing hidb"):
        hidb.export_to(args.path_to_hidb, pretty=args.pretty)

# ----------------------------------------------------------------------

try:
    import argparse
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument('-d', '--debug', action='store_const', dest='loglevel', const=logging.DEBUG, default=logging.INFO, help='Enable debugging output.')

    parser.add_argument('input', nargs="+", help='Source files to process.')
    parser.add_argument('--db', action='store', dest='path_to_hidb', required=True)
    parser.add_argument('--pretty', action='store_true', dest='pretty', default=False)
    # parser.add_argument('output', nargs="?", help='hidb to write.')

    args = parser.parse_args()
    logging.basicConfig(level=args.loglevel, format="%(levelname)s %(asctime)s: %(message)s")
    exit_code = main(args)
except Exception as err:
    logging.error('{}\n{}'.format(err, traceback.format_exc()))
    exit_code = 1
exit(exit_code)

# ======================================================================
### Local Variables:
### eval: (if (fboundp 'eu-rename-buffer) (eu-rename-buffer))
### End:
