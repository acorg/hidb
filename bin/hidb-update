#! /usr/bin/env python3
# -*- Python -*-

"""
"""

import sys, traceback
if sys.version_info.major != 3: raise RuntimeError("Run script with python3")
from pathlib import Path
sys.path[:0] = [str(Path(sys.argv[0]).resolve().parents[1].joinpath("dist")), str(Path(sys.argv[0]).resolve().parents[1].joinpath("python"))]
import logging; module_logger = logging.getLogger(__name__)

import hidb as hidb_m
from hidb import utility

# ----------------------------------------------------------------------

def main(args):
    hidb = hidb_m.HiDb()
    for source in (Path(f).resolve() for f in args.input):
        print(source)
        hidb.add(hidb_m.import_chart(utility.get_ace_data(source)))
        print("------------")
    # with utility.tempdir() as temp_dir:
    #     hidb = hidb_m.HiDb()
    #     for source in (Path(f).resolve() for f in args.input):
    #         print(source)
    #         hidb.add(hidb_m.import_chart(str(utility.get_ace(temp_dir, source))))
    #         print("------------")

# ----------------------------------------------------------------------

try:
    import argparse
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument('-d', '--debug', action='store_const', dest='loglevel', const=logging.DEBUG, default=logging.INFO, help='Enable debugging output.')

    parser.add_argument('input', nargs="+", help='Source files to process.')
    # parser.add_argument('--db', action='store', dest='path_to_hidb', required=True)
    # parser.add_argument('output', nargs="?", help='hidb to write.')

    args = parser.parse_args()
    logging.basicConfig(level=args.loglevel, format="%(levelname)s %(asctime)s: %(message)s")
    exit_code = main(args)
except Exception as err:
    logging.error('{}\n{}'.format(err, traceback.format_exc()))
    exit_code = 1
exit(exit_code)

# ======================================================================
### Local Variables:
### eval: (if (fboundp 'eu-rename-buffer) (eu-rename-buffer))
### End:
