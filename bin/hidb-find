#! /usr/bin/env python3
# -*- Python -*-

"""
"""

import sys, traceback
if sys.version_info.major != 3: raise RuntimeError("Run script with python3")
from pathlib import Path
sys.path[:0] = [str(Path(sys.argv[0]).resolve().parents[1].joinpath("dist")), str(Path(sys.argv[0]).resolve().parents[1].joinpath("python"))]
import logging; module_logger = logging.getLogger(__name__)

import hidb as hidb_m
from hidb import utility

# ----------------------------------------------------------------------

def main(args):
    hidb = hidb_m.HiDb()
    with utility.timeit("Reading hidb"):
        hidb.import_from(args.path_to_hidb)
    if args.path_to_locdb is not None:
        with utility.timeit("Reading locationdb"):
            hidb.import_locdb(args.path_to_locdb)
    if args.name:
        if args.report_score:
            if args.find_antigens:
                scores = hidb.find_antigens_with_score(args.name.upper())
            else:
                scores = hidb.find_sera_with_score(args.name.upper())
            print(len(scores))
            print("\n".join("{:4d} {}".format(e[1], e[0].data().full_name()) for e in scores))
        else:
            if args.find_antigens:
                report(hidb.find_antigens(args.name.upper()), find_antigens=True, report_tables=args.report_tables, report_homologous=args.report_homologous, output_json=args.output_json)
            else:
                report(hidb.find_sera(args.name.upper()), find_antigens=False, report_tables=args.report_tables, report_homologous=args.report_homologous, output_json=args.output_json)
    elif args.countries:
        countries = hidb.all_countries()
        print(len(countries), "\n".join(countries), sep="\n")
    elif args.unrecognized_locations:
        unrecognized_locations = hidb.unrecognized_locations()
        print(len(unrecognized_locations), "\n".join(unrecognized_locations), sep="\n")
    elif args.country:
        report(hidb.all_antigens().country(args.country.upper()), #.date_range("2010", "2011"),
                   find_antigens=True, report_tables=args.report_tables, report_homologous=False, output_json=args.output_json)
    elif args.list_antigens:
        antigens = hidb.list_antigens()
        print(len(antigens))
        print("\n".join(antigens))
    elif args.list_sera:
        sera = hidb.list_sera()
        print(len(sera))
        print("\n".join(sera))

# ----------------------------------------------------------------------

def report(data, find_antigens, report_tables, report_homologous, output_json):
    if find_antigens:
        if report_tables:
            fmt = "{full_name} [{date}] tables:{tables} most-recent:{recent} all-tables:{all_tables}"
        else:
            fmt = "{full_name} [{date}]"
    else:
        if report_tables:
            if report_homologous:
                fmt = "{full_name} tables:{tables} most-recent:{recent} all-tables:{all_tables}\n  Homologous:\n    {homologous}"
            else:
                fmt = "{full_name} tables:{tables} most-recent:{recent} all-tables:{all_tables}"
        else:
            if report_homologous:
                fmt = "{full_name}\n  Homologous:\n    {homologous}"
            else:
                fmt = "{full_name}"
    print(len(data))
    if output_json:
        print("\n".join(hidb_m.json(e) for e in data))
    else:
        if find_antigens:
            def homologous(e):
                return ""
        else:
            def homologous(e):
                return "\n    ".join([repr(e2) for e2 in e.homologous()])
        print("\n".join(fmt.format(full_name=e.data().full_name(), tables=e.number_of_tables(), recent=e.most_recent_table().table_id(), date=e.date(),
                                       all_tables=[t.table_id() for t in e.tables()],
                                       homologous=homologous(e)) for e in data))

# ----------------------------------------------------------------------

try:
    import argparse
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument('-d', '--debug', action='store_const', dest='loglevel', const=logging.DEBUG, default=logging.INFO, help='Enable debugging output.')

    parser.add_argument('--json', dest="output_json", action="store_true", default=False, help='Output full records in json.')
    parser.add_argument('-n', '--name', dest="name", default=None, help='Name to look for.')
    parser.add_argument('--countries', dest="countries", action="store_true", default=False, help='List all countries.')
    parser.add_argument('--country', dest="country", default=None, help='Find antigens isolated in the country.')
    parser.add_argument('--unrecognized-locations', dest="unrecognized_locations", action="store_true", default=False, help='List all unrecognized locations.')
    parser.add_argument('--list-antigens', dest="list_antigens", action="store_true", default=False, help='List all antigen names.')
    parser.add_argument('--list-sera', dest="list_sera", action="store_true", default=False, help='List all serum names.')
    parser.add_argument('--db', action='store', dest='path_to_hidb', required=True)
    parser.add_argument('--locdb', action='store', dest='path_to_locdb', default=None)
    parser.add_argument('--score', dest="report_score", action="store_true", default=False)
    parser.add_argument('--tables', dest="report_tables", action="store_true", default=False)
    parser.add_argument('-s', '--sera', dest="find_antigens", action="store_false", default=True)
    parser.add_argument('--homologous', dest="report_homologous", action="store_true", default=False, help='Report homologous antigens for each serum')
    # parser.add_argument('output', nargs="?", help='hidb to write.')

    args = parser.parse_args()
    logging.basicConfig(level=args.loglevel, format="%(levelname)s %(asctime)s: %(message)s")
    exit_code = main(args)
except Exception as err:
    logging.error('{}\n{}'.format(err, traceback.format_exc()))
    exit_code = 1
exit(exit_code)

# ======================================================================
### Local Variables:
### eval: (if (fboundp 'eu-rename-buffer) (eu-rename-buffer))
### End:
