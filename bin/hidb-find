#! /usr/bin/env python3
# -*- Python -*-

"""
"""

import sys, os, traceback, pprint
if sys.version_info.major != 3: raise RuntimeError("Run script with python3")
from pathlib import Path
sys.path[:0] = [str(Path(os.environ["ACMACSD_ROOT"]).resolve().joinpath("py"))]
# sys.path[:0] = [str(Path(sys.argv[0]).resolve().parents[1].joinpath("dist")), str(Path(sys.argv[0]).resolve().parents[1].joinpath("python"))]
import logging; module_logger = logging.getLogger(__name__)

import hidb as hidb_m
from acmacs_base import timeit, json

# ----------------------------------------------------------------------

class NoMostRecentTable:
    def table_id(self):
        return "*no-most-recent-table*"

class NoOldestTable:
    def table_id(self):
        return "*no-oldest-table*"

# ----------------------------------------------------------------------

def main(args):
    hidb = hidb_m.HiDb()
    with timeit("Reading hidb"):
        hidb.import_from(args.path_to_hidb)
    if args.path_to_locdb is not None:
        with timeit("Reading locationdb"):
            hidb.import_locdb(args.path_to_locdb)
    if args.name or args.cdcid or args.all:
        if args.report_score:
            if args.find_antigens:
                scores = hidb.find_antigens_with_score(args.name.upper())
            else:
                scores = hidb.find_sera_with_score(args.name.upper())
            print(len(scores))
            print("\n".join("{:4d} {}".format(e[1], e[0].data().full_name()) for e in scores))
        else:
            if args.cdcid:
                r = hidb.find_antigens_by_cdcid(args.cdcid)
                report(hidb, r, find_antigens=True, report_tables=args.report_tables, report_oldest_table=args.oldest_table, report_homologous=args.report_homologous, output_json=args.output_json)
            elif args.find_antigens:
                if args.all:
                    r = hidb.list_antigens(lab=args.lab, lineage=args.lineage.upper())
                    if args.sort_by_most_recent:
                        r = sorted(r, key=lambda e: (e.most_recent_table() or NoMostRecentTable()).table_id(), reverse=True)
                else:
                    for fn, fuzziness in [["find_antigens", ""], ["find_antigens_fuzzy", "*"], ["find_antigens_extra_fuzzy", "**"]]:
                        with timeit(fn):
                            r = getattr(hidb, fn)(args.name.upper())
                        if r:
                            break;
                report(hidb, r, fuzziness=fuzziness, find_antigens=True, report_tables=args.report_tables, report_oldest_table=args.oldest_table, report_homologous=args.report_homologous, output_json=args.output_json)
            else:
                if args.all:
                    r = hidb.list_sera(lab=args.lab, lineage=args.lineage.upper())
                    if args.sort_by_most_recent:
                        r = sorted(r, key=lambda e: (e.most_recent_table() or NoMostRecentTable()).table_id(), reverse=True)
                else:
                    r = hidb.find_sera(args.name.upper())
                report(hidb, r, find_antigens=False, report_tables=args.report_tables, report_oldest_table=args.oldest_table, report_homologous=args.report_homologous, output_json=args.output_json)
    elif args.countries:
        countries = hidb.all_countries()
        print(len(countries), "\n".join(countries), sep="\n")
    elif args.unrecognized_locations:
        unrecognized_locations = hidb.unrecognized_locations()
        print(len(unrecognized_locations), "\n".join(unrecognized_locations), sep="\n")
    elif args.country:
        report(hidb, hidb.all_antigens().country(args.country.upper()), #.date_range("2010", "2011"),
                   find_antigens=True, report_tables=args.report_tables, report_oldest_table=args.oldest_table, report_homologous=False, output_json=args.output_json)
    elif args.list_antigen_names:
        antigens = hidb.list_antigen_names(lab=args.lab, lineage=arsg.lineage.upper(), full_name=args.full_name)
        print(len(antigens))
        print("\n".join(antigens))
    elif args.list_serum_names:
        sera = hidb.list_serum_names(lab=args.lab, lineage=args.lineage.upper(), full_name=args.full_name)
        print(len(sera))
        print("\n".join(sera))
    elif args.stat:
        print(json.dumps(hidb.stat(), sort_keys=True, indent=1))

# ----------------------------------------------------------------------

def report(hidb, data, find_antigens, report_tables, report_oldest_table, report_homologous, output_json, fuzziness=""):
    if find_antigens:
        if report_tables:
            if report_homologous:
                fmt = "{fuzziness}{full_name} [{date}] tables:{tables} most-recent:{recent} all-tables:{all_tables}{homologous}"
            else:
                fmt = "{fuzziness}{full_name} [{date}] tables:{tables} most-recent:{recent} all-tables:{all_tables}"
        elif report_oldest_table:
            if report_homologous:
                fmt = "{fuzziness}{full_name} [{date}] oldest:{oldest} {homologous}"
            else:
                fmt = "{fuzziness}{full_name} [{date}] oldest:{oldest}"
        else:
            if report_homologous:
                fmt = "{fuzziness}{full_name} [{date}]{homologous}"
            else:
                fmt = "{fuzziness}{full_name} [{date}]"
    else:
        if report_tables:
            if report_homologous:
                fmt = "{fuzziness}{full_name} tables:{tables} most-recent:{recent} all-tables:{all_tables}{homologous}"
            else:
                fmt = "{fuzziness}{full_name} tables:{tables} most-recent:{recent} all-tables:{all_tables}"
        elif report_oldest_table:
            if report_homologous:
                fmt = "{fuzziness}{full_name} oldest:{oldest}{homologous}"
            else:
                fmt = "oldest:{oldest:40s} {lineage} {full_name}"
        else:
            if report_homologous:
                fmt = "{fuzziness}{full_name}{homologous}"
            else:
                fmt = "{fuzziness}{full_name}"
    print(len(data))
    if output_json:
        print("\n".join(hidb_m.json(e) for e in data))
    else:
        if find_antigens:
            def homologous(e):
                hom = [e2.data().full_name() for e2 in hidb.find_homologous_sera(e)]
                if hom:
                    return "\n  Homologous:\n    " + "\n    ".join(hom)
                else:
                    return ""
            def date(e):
                return e.date()
        else:
            def homologous(e):
                hom = [repr(e2) for e2 in e.homologous()]
                if hom:
                    return "\n  Homologous:\n    " + "\n    ".join(hom)
                else:
                    return ""
            def date(e):
                return ""
        print("\n".join(fmt.format(fuzziness=fuzziness,
                                   full_name=e.data().full_name(),
                                   lineage=e.data().lineage(),
                                   tables=e.number_of_tables(),
                                   recent=(e.most_recent_table() or NoMostRecentTable()).table_id(),
                                   date=date(e),
                                   oldest=(e.oldest_table() or NoOldestTable()).table_id(),
                                   all_tables=[t.table_id() for t in e.tables()],
                                   homologous=homologous(e)) for e in data))

# ----------------------------------------------------------------------

try:
    import argparse
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument('-d', '--debug', action='store_const', dest='loglevel', const=logging.DEBUG, default=logging.INFO, help='Enable debugging output.')

    parser.add_argument('--json', dest="output_json", action="store_true", default=False, help='Output full records in json.')
    parser.add_argument('-n', '--name', dest="name", default=None, help='Name to look for.')
    parser.add_argument('--cdcid', dest="cdcid", default=None, help='CDC# to look for.')
    parser.add_argument('--countries', dest="countries", action="store_true", default=False, help='List all countries.')
    parser.add_argument('--country', dest="country", default=None, help='Find antigens isolated in the country.')
    parser.add_argument('--unrecognized-locations', dest="unrecognized_locations", action="store_true", default=False, help='List all unrecognized locations.')
    parser.add_argument('--stat', dest="stat", action="store_true", default=False, help='Report stat (for SSM).')
    parser.add_argument('--all', dest="all", action="store_true", default=False, help='List all antigens/sera.')
    parser.add_argument('--list-antigen-names', dest="list_antigen_names", action="store_true", default=False, help='List all antigen names.')
    parser.add_argument('--list-serum-names', dest="list_serum_names", action="store_true", default=False, help='List all serum names.')
    parser.add_argument('--db', action='store', dest='path_to_hidb', required=True)
    parser.add_argument('--locdb', action='store', dest='path_to_locdb', default=os.environ["ACMACSD_ROOT"] + "/data/locationdb.json.xz")
    parser.add_argument('--score', dest="report_score", action="store_true", default=False)
    parser.add_argument('--tables', dest="report_tables", action="store_true", default=False)
    parser.add_argument('-s', '--sera', dest="find_antigens", action="store_false", default=True)
    parser.add_argument('--homologous', dest="report_homologous", action="store_true", default=False, help='Report homologous antigens/sera for each serum/antigen')
    parser.add_argument('--lab', action='store', dest='lab', default="")
    parser.add_argument('--lineage', action='store', dest='lineage', default="")
    parser.add_argument('--full-name', action='store_true', dest='full_name', default=False, help="report full name when listing antigens/sera")
    parser.add_argument('--oldest-table', action='store_true', dest='oldest_table', default=False, help="report oldest table when listing antigens/sera")
    parser.add_argument('--sort-by-most-recent', action='store_true', dest='sort_by_most_recent', default=False, help="sort list by the most recent table")
    # parser.add_argument('output', nargs="?", help='hidb to write.')

    args = parser.parse_args()
    logging.basicConfig(level=args.loglevel, format="%(levelname)s %(asctime)s: %(message)s")
    exit_code = main(args)
except Exception as err:
    logging.error('{}\n{}'.format(err, traceback.format_exc()))
    exit_code = 1
exit(exit_code)

# ======================================================================
### Local Variables:
### eval: (if (fboundp 'eu-rename-buffer) (eu-rename-buffer))
### End:
