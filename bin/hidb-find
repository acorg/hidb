#! /usr/bin/env python3
# -*- Python -*-

"""
"""

import sys, traceback
if sys.version_info.major != 3: raise RuntimeError("Run script with python3")
from pathlib import Path
sys.path[:0] = [str(Path(sys.argv[0]).resolve().parents[1].joinpath("dist")), str(Path(sys.argv[0]).resolve().parents[1].joinpath("python"))]
import logging; module_logger = logging.getLogger(__name__)

import hidb as hidb_m
from hidb import utility

# ----------------------------------------------------------------------

def main(args):
    hidb = hidb_m.HiDb()
    with utility.timeit("Reading hidb"):
        hidb.import_from(args.path_to_hidb)
    if args.name:
        antigens = hidb.find_antigens(args.name.upper())
        print(len(antigens))
        # if args.output_json:
        #     print("\n".join(hidb_m.json(e) for e in antigens))
        # else:
        #     print("\n".join(e.data().full_name() for e in antigens))
    elif args.list_antigens:
        antigens = hidb.list_antigens()
        print(len(antigens))
        print("\n".join(antigens))

# ----------------------------------------------------------------------

try:
    import argparse
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument('-d', '--debug', action='store_const', dest='loglevel', const=logging.DEBUG, default=logging.INFO, help='Enable debugging output.')

    parser.add_argument('--json', dest="output_json", action="store_true", default=False, help='Output full records in json.')
    parser.add_argument('-n', '--name', dest="name", default=None, help='Name to look for.')
    parser.add_argument('-a', '--list-antigens', dest="list_antigens", action="store_true", default=False, help='List all antigen names.')
    parser.add_argument('--db', action='store', dest='path_to_hidb', required=True)
    # parser.add_argument('output', nargs="?", help='hidb to write.')

    args = parser.parse_args()
    logging.basicConfig(level=args.loglevel, format="%(levelname)s %(asctime)s: %(message)s")
    exit_code = main(args)
except Exception as err:
    logging.error('{}\n{}'.format(err, traceback.format_exc()))
    exit_code = 1
exit(exit_code)

# ======================================================================
### Local Variables:
### eval: (if (fboundp 'eu-rename-buffer) (eu-rename-buffer))
### End:
