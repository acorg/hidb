#! /usr/bin/env python3
# -*- Python -*-

"""
"""

import sys, traceback
if sys.version_info.major != 3: raise RuntimeError("Run script with python3")
from pathlib import Path
sys.path[:0] = [str(Path(sys.argv[0]).resolve().parents[1].joinpath("dist")), str(Path(sys.argv[0]).resolve().parents[1].joinpath("python"))]
import logging; module_logger = logging.getLogger(__name__)

import hidb as hidb_m
from hidb import utility

# ----------------------------------------------------------------------

def main(args):
    hidb = hidb_m.HiDb()
    with utility.timeit("Reading hidb"):
        hidb.import_from(args.path_to_hidb)
    if args.name:
        if args.report_score:
            if args.find_antigens:
                scores = hidb.find_antigens_with_score(args.name.upper())
            else:
                scores = hidb.find_sera_with_score(args.name.upper())
            print(len(scores))
            print("\n".join("{:4d} {}".format(e[1], e[0].data().full_name()) for e in scores))
        else:
            if args.find_antigens:
                ag_sr = hidb.find_antigens(args.name.upper())
            else:
                ag_sr = hidb.find_sera(args.name.upper())
            print(len(ag_sr))
            if args.output_json:
                print("\n".join(hidb_m.json(e) for e in ag_sr))
            else:
                if args.report_tables:
                    print("\n".join("{} tables:{} most-recent:{} all-tables:{}".format(e.data().full_name(), e.number_of_tables(), e.most_recent_table().table_id(), [t.table_id() for t in e.tables()]) for e in ag_sr))
                else:
                    print("\n".join(e.data().full_name() for e in ag_sr))
    elif args.list_antigens:
        antigens = hidb.list_antigens()
        print(len(antigens))
        print("\n".join(antigens))
    elif args.list_sera:
        sera = hidb.list_sera()
        print(len(sera))
        print("\n".join(sera))

# ----------------------------------------------------------------------

try:
    import argparse
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument('-d', '--debug', action='store_const', dest='loglevel', const=logging.DEBUG, default=logging.INFO, help='Enable debugging output.')

    parser.add_argument('--json', dest="output_json", action="store_true", default=False, help='Output full records in json.')
    parser.add_argument('-n', '--name', dest="name", default=None, help='Name to look for.')
    parser.add_argument('--list-antigens', dest="list_antigens", action="store_true", default=False, help='List all antigen names.')
    parser.add_argument('--list-sera', dest="list_sera", action="store_true", default=False, help='List all serum names.')
    parser.add_argument('--db', action='store', dest='path_to_hidb', required=True)
    parser.add_argument('--score', dest="report_score", action="store_true", default=False)
    parser.add_argument('--tables', dest="report_tables", action="store_true", default=False)
    parser.add_argument('-s', '--sera', dest="find_antigens", action="store_false", default=True)
    # parser.add_argument('output', nargs="?", help='hidb to write.')

    args = parser.parse_args()
    logging.basicConfig(level=args.loglevel, format="%(levelname)s %(asctime)s: %(message)s")
    exit_code = main(args)
except Exception as err:
    logging.error('{}\n{}'.format(err, traceback.format_exc()))
    exit_code = 1
exit(exit_code)

# ======================================================================
### Local Variables:
### eval: (if (fboundp 'eu-rename-buffer) (eu-rename-buffer))
### End:
