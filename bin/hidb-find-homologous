#! /usr/bin/env python3
# -*- Python -*-

"""
"""

import sys, os, traceback, tempfile, shutil, subprocess
if sys.version_info.major != 3: raise RuntimeError("Run script with python3")
from pathlib import Path
sys.path[:0] = [str(Path(os.environ["ACMACSD_ROOT"]).resolve().joinpath("py"))]
import logging; module_logger = logging.getLogger(__name__)

import hidb as hidb_m
from hidb import utility
from acmacs_base import timeit

# ----------------------------------------------------------------------

def main(args):
    if args.output_filename and len(args.input) != 1:
        raise RuntimeError('Cannot write output chart when multiple input charts provided')
    hidb = hidb_m.HiDb()
    with timeit("Reading hidb"):
        hidb.import_from(args.path_to_hidb)
    with utility.tempdir() as temp_dir:
        for source1 in (Path(f).resolve() for f in args.input):
            print(source1)
            source2 = utility.get_ace(Path(temp_dir), source1)
            process(source2, hidb, args.output_filename)
            print("------------")

# ----------------------------------------------------------------------

def process(source, hidb, output_filename):
    chart = hidb_m.import_chart(str(source))
    print(chart.table_id())
    hidb.find_homologous_antigens_for_sera_of_chart(chart)
    # if homologous could not be found using hidb, try to lookup in chart
    chart.find_homologous_antigen_for_sera()

    for sr_no in range(chart.number_of_sera()):
        sr = chart.serum(sr_no)
        print(f"SR {sr_no:3d} {sr.full_name()} {sr.serum_id()} {sr.passage()}")
        ags = sr.homologous()
        if ags:
            for ag_no in ags:
                ag = chart.antigen(ag_no)
                print(f"    AG {ag_no:4d} {ag.full_name()} [{ag.date()}] {ag.lab_id()}")
        else:
            print("    no homologous")

    if output_filename:
        with timeit("Writing " + output_filename):
            hidb_m.export_chart(output_filename, chart)

# ----------------------------------------------------------------------

try:
    import argparse
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument('-d', '--debug', action='store_const', dest='loglevel', const=logging.DEBUG, default=logging.INFO, help='Enable debugging output.')

    parser.add_argument('input', nargs="+", help='Source files to process.')
    parser.add_argument('--db', action='store', dest='path_to_hidb', required=True)
    parser.add_argument('--save', action="store", dest="output_filename", help='save updated chart.')

    args = parser.parse_args()
    logging.basicConfig(level=args.loglevel, format="%(levelname)s %(asctime)s: %(message)s")
    exit_code = main(args)
except Exception as err:
    logging.error('{}\n{}'.format(err, traceback.format_exc()))
    exit_code = 1
exit(exit_code)

# ======================================================================
### Local Variables:
### eval: (if (fboundp 'eu-rename-buffer) (eu-rename-buffer))
### End:
