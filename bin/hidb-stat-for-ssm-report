#! /usr/bin/env python3
# -*- Python -*-

"""
"""

import sys, os, traceback, pprint
if sys.version_info.major != 3: raise RuntimeError("Run script with python3")
from pathlib import Path
sys.path[:0] = [str(Path(os.environ["ACMACSD_ROOT"]).resolve().joinpath("py"))]
import logging; module_logger = logging.getLogger(__name__)

import hidb as hidb_m
from acmacs_base import timeit, json

# ----------------------------------------------------------------------

def main(args):
    stat = {}
    for db_file in Path(os.environ["ACMACSD_ROOT"]).joinpath("data").glob("hidb4.*.json.xz"):
        hidb = hidb_m.HiDb()
        with timeit("Reading hidb from " + str(db_file)):
            hidb.import_from(str(db_file))
        with timeit("Reading locationdb"):
            hidb.import_locdb(str(Path(os.environ["ACMACSD_ROOT"]).joinpath("data", "locationdb.json.xz")))
        with timeit("Making stat"):
            stat.update(hidb.stat())
    print(json.dumps(stat, sort_keys=True, indent=1))

# ----------------------------------------------------------------------

try:
    import argparse
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument('-d', '--debug', action='store_const', dest='loglevel', const=logging.DEBUG, default=logging.INFO, help='Enable debugging output.')
    args = parser.parse_args()
    logging.basicConfig(level=args.loglevel, format="%(levelname)s %(asctime)s: %(message)s")
    exit_code = main(args)
except Exception as err:
    logging.error('{}\n{}'.format(err, traceback.format_exc()))
    exit_code = 1
exit(exit_code)

# ======================================================================
### Local Variables:
### eval: (if (fboundp 'eu-rename-buffer) (eu-rename-buffer))
### End:
