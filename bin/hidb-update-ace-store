#! /usr/bin/env python3
# -*- Python -*-

"""
Updates ~/ac/ace-store from ~/ac/tables-store
"""

import sys, subprocess, time, traceback
if sys.version_info.major != 3: raise RuntimeError("Run script with python3")
from pathlib import Path
import logging; module_logger = logging.getLogger(__name__)

# ----------------------------------------------------------------------

sDirs = [
    "H3/CDC",
    "H3/MELB",
    "H3/NIID",
    "H3/NIMR",
    "H1PDM/CDC",
    "H1PDM/MELB",
    "H1PDM/NIID",
    "H1PDM/NIMR",
    "B/CDC",
    "B/NIID",
    "B/NIMR",
    "B/MELB/victoria",
    "B/MELB/yamagata",
    ]

sSourceDir = Path("~/ac/tables-store").expanduser()
sTargetDir = Path("~/ac/ace-store").expanduser()

# ----------------------------------------------------------------------

def main(args):
    for infix in sDirs:
        target_dir = sTargetDir.joinpath(infix)
        # target_dir.mkdir(mode=0o755, parents=True, exist_ok=True)
        for source in sSourceDir.joinpath(infix).glob("*.ac*"):
            stem = source.stem
            if stem[-5:] == ".acd1":
                stem = stem[:-5]
            target = target_dir.joinpath(stem + ".ace")
            if not target.exists() or target.stat().st_mtime < source.stat().st_mtime:
                print(time.ctime(target.stat().st_mtime) if target.exists() else "                        ", '<', time.ctime(source.stat().st_mtime), target)
                subprocess.run("{acmacs_env} python3 $HOME/ac/acmacs/bin/convert.py -q '{source}' '{target}'".format(acmacs_env=acmacs_env(), source=source, target=target), shell=True, check=True)

# ----------------------------------------------------------------------

def acmacs_env():
    if sys.platform == "linux":
        LD_LIBRARY_PATH = "LD_LIBRARY_PATH=$HOME/c2r/lib:$HOME/ac/acmacs/build/backend"
    else:
        LD_LIBRARY_PATH = ""
    return "env PATH=\"$HOME/c2r/bin:$PATH\" ACMACS_ROOT=$HOME/ac/acmacs PYTHONPATH=$HOME/ac/acmacs:$HOME/ac/acmacs/build " + LD_LIBRARY_PATH

# ----------------------------------------------------------------------

try:
    import argparse
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument('-d', '--debug', action='store_const', dest='loglevel', const=logging.DEBUG, default=logging.INFO, help='Enable debugging output.')

    args = parser.parse_args()
    logging.basicConfig(level=args.loglevel, format="%(levelname)s %(asctime)s: %(message)s")
    exit_code = main(args)
except Exception as err:
    logging.error('{}\n{}'.format(err, traceback.format_exc()))
    exit_code = 1
exit(exit_code)


# ======================================================================
### Local Variables:
### eval: (if (fboundp 'eu-rename-buffer) (eu-rename-buffer))
### End:
